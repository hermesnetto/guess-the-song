{"version":3,"sources":["components/Brand.tsx","components/Button.ts","components/AudioPlayer.tsx","custom-hooks/useSpotifyToken.ts","store/global.ts","store/index.tsx","components/TrackSelector.tsx","components/PageTitle.tsx","components/PlayerAnimation.tsx","utils.ts","custom-hooks/useFetchTracks.ts","screens/Game.tsx","components/OptionsSelectorItem.tsx","components/OptionsSelector.tsx","store/reducer/options.ts","constants.ts","screens/Setup.tsx","screens/Home.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["StyledBrand","styled","h1","props","theme","colors","chineseViolet","small","css","Brand","updateSongInterval","Button","button","themeStyle","secondaryButtonBg","secondaryButtonColor","size","block","ProgressBar","div","ProgressBarLine","title","AudioPlayer","src","total","useState","played","setPlayed","audioEl","useRef","useEffect","current","pause","clearInterval","setInterval","currentTime","Math","ceil","style","width","ref","autoPlay","useSpotifyToken","token","setToken","key","value","readToken","localStorage","getItem","actions","saveToken","setItem","initialState","genres","difficulty","gameState","points","isSwitchGameState","action","type","isSetGenresAction","isSetDifficultyAction","isIncrementPointsAction","switchGameStateAction","nextState","payload","globalReducer","state","StoreContext","createContext","StoreProvider","children","useReducer","dispatch","Provider","StyledList","ul","StyledItem","li","StyledImage","img","StyledTitle","span","StyledOption","success","error","TrackSelector","tracks","selected","useContext","isChoosen","setIsChoosen","choosenId","setChoosenId","map","id","album","name","onClick","trackId","disabled","images","url","alt","StyledPageTitle","h2","right","length","PageTitle","PlayerAnimation","background","speed","height","marginLeft","marginBottom","loop","autoplay","getRandomFloat","min","max","floor","random","getRandomInt","emptyTrack","artists","preview_url","spotifyUrl","useFetchTracks","limit","setTracks","setSelected","fetchAndSetTracks","useCallback","a","paramsArr","join","params","reduce","acc","fetch","method","headers","Headers","Authorization","response","json","fetchMoreTracks","StyledBtnGroup","GameScreen","parseInt","Item","fullWidth","OptionsSelectorItem","toggleItem","multiple","totalSelected","OptionsSelector","options","filter","item","Wrapper","List","option","defaultProps","setItemsAction","items","optionsReducer","isSetItemsAction","isToggleItemAction","GENRES","SetupScreen","dispatchGenres","difficulties","dispatchDifficulties","g","handleToggleItem","toggleItemAction","setGenresAction","d","scopes","HomeScreen","hash","window","location","replace","split","href","Page","Container","spaceTop","App","history","pushState","document","pathname","search","isHome","Game","isSetupPage","Setup","Home","Boolean","hostname","match","variables","platinum","middleBlue","mediumAquamarine","darkSlateGray","sunny","subtitle","primaryButtonBg","primaryButtonColor","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0jBAOA,IAIMA,EAAcC,IAAOC,GAAV,KAEN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,iBACxB,SAAAH,GAAK,OAAKA,EAAMI,MAAQ,OAAS,UAEhC,SAAAJ,GAAK,OAAKA,EAAMI,MAAQ,OAAS,UAE7C,SAAAJ,GAAK,OACLA,EAAMI,OACNC,YADA,QAOWC,EAnBqB,SAAC,GAAe,IAAbF,EAAY,EAAZA,MACrC,OAAO,kBAACP,EAAD,CAAaO,MAAOA,GAApB,mB,4iCCGT,ICHIG,EDwDWC,EArDAV,IAAOW,OAAV,KAOR,SAAAT,GACA,OAAQA,EAAMU,YACZ,IAAK,YACH,OAAOL,YAAP,IACgBL,EAAMC,MAAMC,OAAOS,kBACxBX,EAAMC,MAAMC,OAAOU,qBACZZ,EAAMC,MAAMC,OAAOU,sBAEvC,QACE,OAAOP,YAAP,SASJ,SAAAL,GACA,OAAQA,EAAMa,MACZ,IAAK,KACH,OAAOR,YAAP,KAIF,IAAK,KACH,OAAOA,YAAP,KAIF,QACE,OAAOA,YAAP,SAOJ,SAAAL,GAAK,OACLA,EAAMc,OACNT,YADA,Q,gUC/CJ,IAsCMU,EAAcjB,IAAOkB,IAAV,KASXC,EAAkBnB,IAAOkB,IAAV,KACL,SAAAhB,GAAK,OAAIA,EAAMC,MAAMC,OAAOgB,SAI7BC,EApDiC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAAY,EACtCC,mBAAiB,GADqB,mBAC3DC,EAD2D,KACnDC,EADmD,KAE5DC,EAAUC,iBAAyB,MA0BzC,OAxBAC,qBAAU,WACRH,EAAU,KACT,CAACJ,IAEJO,qBAAU,WACJJ,IAAWF,IACTI,EAAQG,SACVH,EAAQG,QAAQC,QAGdtB,GACFuB,cAAcvB,MAGjB,CAACgB,EAAQF,IAEZM,qBAAU,WACRpB,EAAqBwB,aAAY,WAAO,IAAD,GACrC,UAAIN,EAAQG,eAAZ,aAAI,EAAiBI,cACnBR,EAAUS,KAAKC,KAAKT,EAAQG,QAAQI,gBAErC,MACF,CAACZ,IAGF,oCACE,kBAACL,EAAD,KACE,kBAACE,EAAD,CAAiBkB,MAAO,CAAEC,MAAM,GAAD,OAAMb,EAASF,EAAS,IAAxB,SAEjC,2BAAOD,IAAKA,EAAKiB,IAAKZ,EAASa,UAAQ,MCb9BC,EAvBS,WAAkE,IAAD,EAC7DjB,mBAAiB,IAD4C,mBAChFkB,EADgF,KACzEC,EADyE,KAEjFC,EAAM,oBAEZf,qBAAU,WACR,IAAMgB,EAAQC,IACVD,GACFF,EAASE,KAEV,IAEH,IAAMC,EAAY,WAChB,OAAOC,aAAaC,QAAQJ,IAQ9B,MAAO,CAAEF,QAAOO,QAAS,CAAEH,YAAWI,UALpB,SAACR,GACjBK,aAAaI,QAAQP,EAAKF,GAC1BC,EAASD,O,OCfAU,EAAsB,CACjCC,OAAQ,GACRC,WAAY,KACZC,UAAW,OACXC,OAAQ,GAkCV,SAASC,EAAkBC,GACzB,MAAuB,sBAAhBA,EAAOC,KAGhB,SAASC,EAAkBF,GACzB,MAAuB,eAAhBA,EAAOC,KAGhB,SAASE,EAAsBH,GAC7B,MAAuB,mBAAhBA,EAAOC,KAGhB,SAASG,EAAwBJ,GAC/B,MAAuB,qBAAhBA,EAAOC,KAuBT,SAASI,EAAsBC,GACpC,MAAO,CACLL,KAAM,oBACNM,QAAS,CAAED,cAwBAE,MA/Cf,WAAqE,IAA9CC,EAA6C,uDAA9Bf,EAAcM,EAAgB,uCAClE,OAAID,EAAkBC,GACb,eAAKS,EAAZ,CAAmBZ,UAAWG,EAAOO,QAAQD,YAG3CJ,EAAkBF,GACb,eAAKS,EAAZ,CAAmBd,OAAQK,EAAOO,QAAQZ,SAGxCQ,EAAsBH,GACjB,eAAKS,EAAZ,CAAmBb,WAAYI,EAAOO,QAAQX,aAG5CQ,EAAwBJ,GACnB,eAAKS,EAAZ,CAAmBX,OAAQW,EAAMX,OAAS,IAGrCW,GC5EHC,EAAeC,wBAAc,IAE7BC,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACtBC,qBAAWN,EAAed,GADJ,mBACzCe,EADyC,KAClCM,EADkC,KAGhD,OAAO,kBAACL,EAAaM,SAAd,CAAuB7B,MAAO,CAAEsB,QAAOM,aAAaF,I,+9BCI7D,IAiDMI,EAAa3E,IAAO4E,GAAV,KAMVC,EAAa7E,IAAO8E,GAAV,KAKVC,EAAc/E,IAAOgF,IAAV,KAIXC,EAAcjF,IAAOkF,KAAV,KAKXC,EAAenF,IAAOW,OAAV,KAOd,SAAAT,GAAK,OACLA,EAAMkF,SACN7E,YADA,QAKA,SAAAL,GAAK,OACLA,EAAMmF,OACN9E,YADA,QAKA,SAAAL,GAAK,OACLA,EAAMuB,QACNlB,YADA,QAUW+E,EAnGqC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACrDf,EAAagB,qBAAWrB,GAAxBK,SADoE,EAE1CjD,oBAAkB,GAFwB,mBAErEkE,EAFqE,KAE1DC,EAF0D,OAG1CnE,mBAAiB,IAHyB,mBAGrEoE,EAHqE,KAG1DC,EAH0D,KAK5EhE,qBAAU,WACR8D,GAAa,GACbE,EAAa,MACZ,CAACL,IAaJ,OACE,oCACE,kBAACb,EAAD,KACGY,EAAOO,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClBb,EAAUM,GAAaK,IAAOH,GAAaA,IAAcJ,EACzDH,EAAQK,GAAaK,IAAOH,GAAaA,IAAcJ,EACvD/D,EAASiE,GAAaK,IAAOH,GAAaG,IAAOP,EAEvD,OACE,kBAACX,EAAD,CAAYjC,IAAG,gBAAWmD,IACxB,kBAACZ,EAAD,CACEC,QAASA,EACTC,MAAOA,EACP5D,OAAQA,EACRyE,QAAS,kBAzBFC,EAyBoBJ,EAxBvCJ,GAAa,GACbE,EAAaM,QAETA,IAAYX,GACdf,EF6EG,CACLd,KAAM,sBEnFY,IAACwC,GA0BPC,SAAUV,GAEV,kBAACX,EAAD,CAAazD,IAAK0E,EAAMK,OAAO,GAAGC,IAAKC,IAAI,KAC3C,kBAACtB,EAAD,KAAcgB,W,6SC7C9B,IASMO,GAAkBxG,IAAOyG,GAAV,MAKjB,SAAAvG,GAAK,OACLA,EAAMwG,OACNxG,EAAMwG,MAAMC,QACZpG,YAFA,QAQWqG,GAvB6B,SAAC,GAAyB,IAAvBrC,EAAsB,EAAtBA,SAAUmC,EAAY,EAAZA,MACvD,OACE,kBAACF,GAAD,CAAiBE,MAAOA,GACrBnC,EACAmC,GAASA,EAAMC,QAAU,8BAAOD,KCIxBG,GAbmB,WAChC,OACE,mCACEvF,IAAI,4DACJwF,WAAW,UACXC,MAAM,IACN1E,MAAO,CAAEC,MAAO,QAAS0E,OAAQ,IAAKC,WAAY,QAASC,aAAc,IACzEC,MAAI,EACJC,UAAQ,K,4BCRP,SAASC,GAAeC,EAAaC,GAG1C,OAFAD,EAAMnF,KAAKC,KAAKkF,GAChBC,EAAMpF,KAAKqF,MAAMD,GACVpF,KAAKsF,UAAYF,EAAMD,GAAOA,EAGhC,SAASI,GAAaJ,EAAaC,GAGxC,OAFAD,EAAMnF,KAAKC,KAAKkF,GAChBC,EAAMpF,KAAKqF,MAAMD,GACVpF,KAAKqF,MAAMrF,KAAKsF,UAAYF,EAAMD,IAAQA,ECAnD,IAAMK,GAA2B,CAC/B5B,GAAI,GACJE,KAAM,GACND,MAAO,CACLK,OAAQ,IAEVuB,QAAS,GACTC,YAAa,IAETC,GAAa,6CAkDJC,OAhDf,SAAwBrF,EAAsBW,GAAgD,IAA9B2E,EAA6B,uDAAb,EAAa,EAC/DxG,mBAAyB,IADsC,mBACpF+D,EADoF,KAC5E0C,EAD4E,OAE3DzG,mBAAuBmG,IAFoC,mBAEpFnC,EAFoF,KAE1E0C,EAF0E,KAIrFC,EAAoBC,sBAAW,wBAAC,qCAAAC,EAAA,yDAC/B3F,EAD+B,wDAGpCuF,EAAU,IAEJK,EAAY,CAChB,CAAC,QAASN,GACV,CAAC,cAAe3E,EAAOkF,KAAK,MAC5B,CAAC,mBAAoBlB,GAAe,EAAK,KACzC,CAAC,mBAAoBA,GAAe,EAAK,KACzC,CAAC,aAAcA,GAAe,EAAK,KACnC,CAAC,uBAAwBA,GAAe,EAAK,KAC7C,CAAC,cAAeA,GAAe,EAAK,MAGhCmB,EAASF,EAAUG,QAAO,SAACC,EAAD,GAAwB,IAAD,mBAAhB9F,EAAgB,KAAXC,EAAW,KACrD,OAAK6F,EACC,GAAN,OAAUA,EAAV,YAAiB9F,EAAjB,YAAwBC,GADR,GAAN,OAAUD,EAAV,YAAiBC,KAE1B,IAlBiC,SAoBb8F,MAAM,GAAD,OAAIb,GAAJ,YAAkBU,GAAU,CACtDI,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnBC,cAAc,UAAD,OAAYrG,GAAS,IAClC,eAAgB,uBAxBgB,cAoB9BsG,EApB8B,iBA2BVA,EAASC,OA3BC,iBA2B5B1D,EA3B4B,EA2B5BA,OAER2C,EAAY3C,EAAOmC,GAAa,EAAG,KACnCO,EAAU1C,GA9B0B,4CA+BnC,CAAClC,EAAQ2E,EAAOtF,IAEbwG,EAAkB,WACtBf,KAOF,OAJAtG,qBAAU,WACRsG,MACC,CAACA,IAEG,CAAE5C,SAAQC,WAAU0D,oB,gOCvD7B,IAqBMC,GAAiBnJ,IAAOkB,IAAV,MAYLkI,GAjCc,WAAO,IAC1BjF,EAAUsB,qBAAWrB,GAArBD,MACAzB,EAAUD,IAAVC,MAFyB,EAGaqF,GAAerF,EAAOyB,EAAMd,QAAlEkC,EAHyB,EAGzBA,OAAQC,EAHiB,EAGjBA,SAAU0D,EAHO,EAGPA,gBAE1B,OACE,oCACE,kBAAC,GAAD,CAAWxC,MAAK,eAAUvC,EAAMX,SAAhC,aACCgC,EAASO,IACR,kBAAC,EAAD,CAAazE,IAAKkE,EAASqC,YAAatG,MAAO8H,SAASlF,EAAMb,WAAY,MAE5E,kBAAC,GAAD,MACA,kBAAC,EAAD,CAAeiC,OAAQA,EAAQC,SAAUA,EAASO,KAClD,kBAACoD,GAAD,KACE,kBAAC,EAAD,CAAQvI,WAAW,aAAnB,aACA,kBAAC,EAAD,CAAQsF,QAASgD,GAAjB,iB,ulBCTR,IA6BMI,GAAOtJ,IAAOW,OAAV,MAON,SAAAT,GAAK,OACLA,EAAMqJ,WACNhJ,YADA,SAKA,SAAAL,GAAK,OACLA,EAAMsF,UACNjF,YADA,SAOA,SAAAL,GAAK,OACJA,EAAMsF,UACPjF,YADA,SAQWiJ,GA3DiD,SAAC,GAS1D,IARLzD,EAQI,EARJA,GACA3E,EAOI,EAPJA,MACAoE,EAMI,EANJA,SACAiE,EAKI,EALJA,WACAC,EAII,EAJJA,SACAH,EAGI,EAHJA,UACAvB,EAEI,EAFJA,MACA2B,EACI,EADJA,cAcA,OACE,kBAACL,GAAD,CAAM9D,SAAUA,EAAU+D,UAAWA,EAAWrD,QAb9B,WACbV,EAOHiE,EAAW1D,EAAI2D,GANV1B,EAEMA,GAAS2B,EAAgB3B,GAClCyB,EAAW1D,EAAI2D,GAFfD,EAAW1D,EAAI2D,KAWhBtI,I,iOC1BP,IAAMwI,GAAkD,SAAC,GAOlD,IANLxI,EAMI,EANJA,MACAyI,EAKI,EALJA,QACAJ,EAII,EAJJA,WACAC,EAGI,EAHJA,SACAH,EAEI,EAFJA,UACAvB,EACI,EADJA,MAEM2B,EAAgBE,EAAQC,QAAO,SAACC,GAAD,OAA0BA,EAAKvE,YAAUmB,OAE9E,OACE,kBAACqD,GAAD,KACE,kBAAC,GAAD,KAAY5I,GACZ,kBAAC6I,GAAD,KACGJ,EAAQ/D,KAAI,SAAAoE,GAAM,OACjB,kBAAC,GAAD,eACEtH,IAAKsH,EAAOnE,GACZ2D,SAAUA,EACVD,WAAYA,EACZF,UAAWA,EACXvB,MAAOA,EACP2B,cAAeA,GACXO,UAQhBN,GAAgBO,aAAe,CAC7BT,UAAU,EACVH,WAAW,GAGb,IAAMS,GAAUhK,IAAOkB,IAAV,MAIP+I,GAAOjK,IAAOkB,IAAV,MAMK0I,MCKR,SAASQ,GAAeC,GAC7B,MAAO,CACL1G,KAlEqB,oBAmErBM,QAAS,CACPoG,UAeSC,OAnDf,SAAwBnG,EAAcT,GACpC,OATF,SAA0BA,GACxB,MAzBuB,sBAyBhBA,EAAOC,KAQV4G,CAAiB7G,GACZ,CACL2G,MAAO3G,EAAOO,QAAQoG,OAP5B,SAA4B3G,GAC1B,MA5ByB,wBA4BlBA,EAAOC,KAUV6G,CAAmB9G,GAChBA,EAAOO,QAAQyF,SAWb,CACLW,MAAOlG,EAAMkG,MAAMvE,KAAI,SAAAiE,GACrB,OAAIA,EAAKhE,KAAOrC,EAAOO,QAAQ8B,GACtB,eAAKgE,EAAZ,CAAkBvE,UAAWuE,EAAKvE,WAE7BuE,MAfF,CACLM,MAAOlG,EAAMkG,MAAMvE,KAAI,SAAAiE,GACrB,OAAIA,EAAKhE,KAAOrC,EAAOO,QAAQ8B,GACtB,eAAKgE,EAAZ,CAAkBvE,UAAU,IAEvB,eAAKuE,EAAZ,CAAkBvE,UAAU,QAe7BrB,GC/DIsG,GAAS,CACpB,QACA,UACA,QACA,QACA,OACA,QACA,OACA,SACA,UACA,QACA,QACA,OACA,QACA,QACA,MACA,SACA,MACA,OACA,SACA,YACA,OACA,QACA,YACA,OCoDaC,GAjEe,WAAO,IAC3BjG,EAAagB,qBAAWrB,GAAxBK,SAD0B,EAEDD,qBAAW8F,GAAgB,CAAED,MAAO,KAFnC,mBAE3BhH,EAF2B,KAEnBsH,EAFmB,OAGWnG,qBAAW8F,GAAgB,CAAED,MAAO,KAH/C,mBAG3BO,EAH2B,KAGbC,EAHa,KAI1BnI,EAAUD,IAAVC,MAERb,qBAAU,WAIR8I,EACEP,GACEK,GAAO3E,KAAI,SAACgF,GAAD,MAAgB,CACzB/E,GAAI+E,EACJ1J,MAAO0J,EACPtF,UAAU,QAKhBqF,EACET,GAAe,CACb,CAAErE,GAAI,KAAM3E,MAAO,OAAQoE,UAAU,GACrC,CAAEO,GAAI,KAAM3E,MAAO,SAAUoE,UAAU,GACvC,CAAEO,GAAI,IAAK3E,MAAO,OAAQoE,UAAU,QAGvC,CAAC9C,IAEJ,IAAMqI,EAAmB,SAACtG,GAAD,OAAgC,SAACsB,EAAY2D,GACpEjF,EFkCG,SAA0BsB,EAAY2D,GAC3C,MAAO,CACL/F,KA1EuB,sBA2EvBM,QAAS,CACP8B,KACA2D,aEvCOsB,CAAiBjF,EAAI2D,MAgBhC,OACE,oCACE,kBAAC,GAAD,CACEtI,MAAM,sCACNyI,QAASxG,EAAOgH,MAChBZ,WAAYsB,EAAiBJ,GAC7B3C,MAAO,EACP0B,UAAQ,IAEV,kBAAC,GAAD,CACEtI,MAAM,wBACNqI,WAAYsB,EAAiBF,GAC7BhB,QAASe,EAAaP,QAExB,kBAAC,EAAD,CAAQnE,QA3BY,WACtBzB,EZ6CG,SAAyBpB,GAC9B,MAAO,CACLM,KAAM,aACNM,QAAS,CAAEZ,WY/CT4H,CACE5H,EAAOgH,MAAMP,QAAO,SAACgB,GAAD,OAAuBA,EAAEtF,YAAUM,KAAI,SAACgF,GAAD,OAAuBA,EAAE/E,QAGxFtB,EZgDK,CACLd,KAAM,iBACNM,QAAS,CAAEX,WYjDWsH,EAAaP,MAAMP,QAAO,SAACoB,GAAD,OAAuBA,EAAE1F,YAAU,GAAGO,MAGtFtB,EAASV,EAAsB,cAiB7B,gBC1DAoH,GAAS,CAAC,iBA+CDC,GA7Cc,WAAO,IAC1B3G,EAAagB,qBAAWrB,GAAxBK,SADyB,EAM7BhC,IAFFC,EAJ+B,EAI/BA,MAJ+B,IAK/BO,QAAWH,EALoB,EAKpBA,UAAWI,EALS,EAKTA,UAGxBrB,qBAAU,WACR,IAAMwJ,EAAOC,OAAOC,SAASF,KAEzBA,IACFnI,EACEmI,EACGG,QAAQ,IAAK,IACbC,MAAM,KAAK,GACXA,MAAM,KAAK,IAGhBhH,EAASV,EAAsB,kBAEhC,CAACU,EAAUvB,IAed,OACE,oCACE,kBAAC,EAAD,CAAQnC,KAAK,KAAKmF,QAfA,WACfxD,GAAUI,IAQb2B,EAASV,EAAsB,eAJ/BuH,OAAOC,SAASG,KAAhB,UApCsB,yCAoCtB,sBAnCW,mCAmCX,yBAhCA,gDAgCA,kBAAyGP,GAAO5C,KAC9G,OADF,0CAU0CvH,OAAK,GAA/C,gB,6ZC7BN,IAiDM2K,GAAO3L,IAAOkB,IAAV,MAKJ0K,GAAY5L,IAAOkB,IAAV,MAQX,SAAAhB,GAAK,OACLA,EAAM2L,UACNtL,YADA,SAMWuL,GArEO,SAAC,GAAiB,EAAfvH,SAAgB,IAC/BE,EAAagB,qBAAWrB,GAAxBK,SAGKvB,EACTT,IADFQ,QAAWC,UAGbrB,qBAAU,WACR,IAAMwJ,EAAOC,OAAOC,SAASF,KAEzBA,IACFnI,EACEmI,EACGG,QAAQ,IAAK,IACbC,MAAM,KAAK,GACXA,MAAM,KAAK,IAGhBhH,EAASV,EAAsB,eAC/BuH,OAAOS,QAAQC,UACb,GACAC,SAAS7K,MACTkK,OAAOC,SAASW,SAAWZ,OAAOC,SAASY,WAG9C,CAAC1H,EAAUvB,IAzBwB,IA2B9BiB,EAAUsB,qBAAWrB,GAArBD,MAQR,IAAMiI,EAtCe,SAsCKjI,EAAMZ,UAEhC,OACE,oCACE,kBAACoI,GAAD,KACE,kBAACC,GAAD,CAAWC,UAAWO,GACnBA,GAAU,kBAAC,EAAD,MAhDE,YAqCJjI,EAAMZ,UAAmB,kBAAC8I,GAAD,MA1C5C,SAAqB9I,GACnB,MAAqB,eAAdA,EA0CD+I,CAAYnI,EAAMZ,WAAmB,kBAACgJ,GAAD,MAClC,kBAACC,GAAD,UC5CSC,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DChBN,IAAMC,GACM,UADNA,GAGc,UAHdA,GAKW,UALXA,GAMG,UAuBMzM,GApBa,CAC1BC,OAAQ,CACNyM,SAAUD,GACVE,WAVU,UAWVC,iBAAkBH,GAClBvM,cAVa,UAWb2M,cAAeJ,GACfK,MAAOL,GAEP9F,WAAY8F,GACZxL,MAAOwL,GACPM,SAAUN,GAEVO,gBAAiBP,GACjBQ,mBAAoBR,GACpB/L,kBAAmB+L,GACnB9L,qBAAsB8L,KCjB1BS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAepN,MAAOA,IACpB,kBAAC,EAAD,KACE,kBAAC,GAAD,SAIN8L,SAASuB,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1I,GACL2I,QAAQ3I,MAAMA,EAAM4I,c","file":"static/js/main.65c47b7e.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\n\ninterface BrandProps {\n  small?: boolean;\n}\n\nconst Brand: React.FC<BrandProps> = ({ small }) => {\n  return <StyledBrand small={small}>Guess the Song</StyledBrand>;\n};\n\nconst StyledBrand = styled.h1<BrandProps>`\n  font-family: 'Special Elite', cursive;\n  color: ${props => props.theme.colors.chineseViolet};\n  font-size: ${props => (props.small ? '26px' : '82px')};\n  font-weight: bold;\n  margin-top: ${props => (props.small ? '30px' : '80px')};\n\n  ${props =>\n    props.small &&\n    css`\n      margin-bottom: 20px;\n      text-align: center;\n    `}\n`;\n\nexport default Brand;\n","import styled, { css } from 'styled-components';\n\n/**\n * @TODO Check type props not workign\n */\ninterface ButtonProps {\n  themeStyle?: 'primary' | 'secondary';\n  size?: 'sm' | 'md' | 'lg';\n  block?: boolean;\n}\n\nconst Button = styled.button<ButtonProps>`\n  border-style: solid;\n  border-width: 1px;\n  text-decoration: none;\n  text-align: center;\n  border-radius:5px;\n\n  ${props => {\n    switch (props.themeStyle) {\n      case 'secondary':\n        return css`\n          background: ${props.theme.colors.secondaryButtonBg};\n          color: ${props.theme.colors.secondaryButtonColor};\n          border-color: ${props.theme.colors.secondaryButtonColor};\n        `;\n      default:\n        return css`\n          background: #38c172;\n          color: #fff;\n          border-color: #399e64;\n        `;\n    }\n  }}\n\n\n  ${props => {\n    switch (props.size) {\n      case 'sm':\n        return css`\n          font-size: 12px;\n          padding: 10px;\n        `;\n      case 'lg':\n        return css`\n          font-size: 30px;\n          padding: 20px;\n        `;\n      default:\n        return css`\n          font-size: 20px;\n          padding: 12px 20px;\n        `;\n    }\n  }}\n\n  ${props =>\n    props.block &&\n    css`\n      display: block;\n      width: 100%;\n    `}\n`;\n\nexport default Button;\n","import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\n\ninterface AudioPlayerProps {\n  src: string;\n  total: number;\n}\n\nlet updateSongInterval: number;\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({ src, total }) => {\n  const [played, setPlayed] = useState<number>(0);\n  const audioEl = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    setPlayed(0);\n  }, [src]);\n\n  useEffect(() => {\n    if (played === total) {\n      if (audioEl.current) {\n        audioEl.current.pause();\n      }\n\n      if (updateSongInterval) {\n        clearInterval(updateSongInterval);\n      }\n    }\n  }, [played, total]);\n\n  useEffect(() => {\n    updateSongInterval = setInterval(() => {\n      if (audioEl.current?.currentTime) {\n        setPlayed(Math.ceil(audioEl.current.currentTime));\n      }\n    }, 10);\n  }, [src]);\n\n  return (\n    <>\n      <ProgressBar>\n        <ProgressBarLine style={{ width: `${(played / total) * 100}%` }} />\n      </ProgressBar>\n      <audio src={src} ref={audioEl} autoPlay />\n    </>\n  );\n};\n\nconst ProgressBar = styled.div`\n  height: 15px;\n  background: #ccc;\n  border: 1px solid #444;\n  border-radius: 10px;\n  overflow: hidden;\n  margin-bottom: 15px;\n`;\n\nconst ProgressBarLine = styled.div`\n  background: ${props => props.theme.colors.title};\n  height: 100%;\n`;\n\nexport default AudioPlayer;\n","import { useState, useEffect } from 'react';\n\ninterface UseSpotifyTokenActions {\n  readToken: () => string | null;\n  saveToken: (token: string) => void;\n}\n\nconst useSpotifyToken = (): { token: string | null; actions: UseSpotifyTokenActions } => {\n  const [token, setToken] = useState<string>('');\n  const key = 'gts-spotify-token';\n\n  useEffect(() => {\n    const value = readToken();\n    if (value) {\n      setToken(value);\n    }\n  }, []);\n\n  const readToken = (): string | null => {\n    return localStorage.getItem(key);\n  };\n\n  const saveToken = (token: string): void => {\n    localStorage.setItem(key, token);\n    setToken(token);\n  };\n\n  return { token, actions: { readToken, saveToken } };\n};\n\nexport default useSpotifyToken;\n","export type GameStates = 'INIT' | 'SETTING_UP' | 'PLAYING';\n\nexport interface State {\n  genres: string[];\n  difficulty: string;\n  gameState: GameStates;\n  points: number;\n}\n\nexport const initialState: State = {\n  genres: [],\n  difficulty: '15',\n  gameState: 'INIT',\n  points: 0,\n};\n\ninterface SwitchGameStateAction {\n  type: 'SWITCH_GAME_STATE';\n  payload: {\n    nextState: GameStates;\n  };\n}\n\ninterface SetGenresAction {\n  type: 'SET_GENRES';\n  payload: {\n    genres: string[];\n  };\n}\n\ninterface SetDifficultyAction {\n  type: 'SET_DIFFICULTY';\n  payload: {\n    difficulty: string;\n  };\n}\n\ninterface IncrementPointsAction {\n  type: 'INCREMENT_POINTS';\n}\n\nexport type Action =\n  | SetGenresAction\n  | SetDifficultyAction\n  | SwitchGameStateAction\n  | IncrementPointsAction;\n\nfunction isSwitchGameState(action: Action): action is SwitchGameStateAction {\n  return action.type === 'SWITCH_GAME_STATE';\n}\n\nfunction isSetGenresAction(action: Action): action is SetGenresAction {\n  return action.type === 'SET_GENRES';\n}\n\nfunction isSetDifficultyAction(action: Action): action is SetDifficultyAction {\n  return action.type === 'SET_DIFFICULTY';\n}\n\nfunction isIncrementPointsAction(action: Action): action is IncrementPointsAction {\n  return action.type === 'INCREMENT_POINTS';\n}\n\nfunction globalReducer(state: State = initialState, action: Action) {\n  if (isSwitchGameState(action)) {\n    return { ...state, gameState: action.payload.nextState };\n  }\n\n  if (isSetGenresAction(action)) {\n    return { ...state, genres: action.payload.genres };\n  }\n\n  if (isSetDifficultyAction(action)) {\n    return { ...state, difficulty: action.payload.difficulty };\n  }\n\n  if (isIncrementPointsAction(action)) {\n    return { ...state, points: state.points + 1 };\n  }\n\n  return state;\n}\n\nexport function switchGameStateAction(nextState: GameStates): SwitchGameStateAction {\n  return {\n    type: 'SWITCH_GAME_STATE',\n    payload: { nextState },\n  };\n}\n\nexport function setGenresAction(genres: string[]): SetGenresAction {\n  return {\n    type: 'SET_GENRES',\n    payload: { genres },\n  };\n}\n\nexport function setDifficultyAction(difficulty: string): SetDifficultyAction {\n  return {\n    type: 'SET_DIFFICULTY',\n    payload: { difficulty },\n  };\n}\n\nexport function incrementPointsAction(): IncrementPointsAction {\n  return {\n    type: 'INCREMENT_POINTS',\n  };\n}\n\nexport default globalReducer;\n","import React, { createContext, Dispatch, useReducer } from 'react';\n\nimport globalReducer, { State, Action, initialState } from './global';\n\nconst StoreContext = createContext({} as { state: State; dispatch: Dispatch<Action> });\n\nconst StoreProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(globalReducer, initialState);\n\n  return <StoreContext.Provider value={{ state, dispatch }}>{children}</StoreContext.Provider>;\n};\n\nexport { StoreContext, StoreProvider };\n","import React, { useState, useContext, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { SpotifyTrack } from '../types';\n\nimport { StoreContext } from '../store';\nimport { incrementPointsAction } from '../store/global';\n\ninterface TrackSelectorProps {\n  tracks: SpotifyTrack[];\n  selected: string;\n}\n\nconst TrackSelector: React.FC<TrackSelectorProps> = ({ tracks, selected }) => {\n  const { dispatch } = useContext(StoreContext);\n  const [isChoosen, setIsChoosen] = useState<boolean>(false);\n  const [choosenId, setChoosenId] = useState<string>('');\n\n  useEffect(() => {\n    setIsChoosen(false);\n    setChoosenId('');\n  }, [selected]);\n\n  const handleClick = (trackId: string) => {\n    setIsChoosen(true);\n    setChoosenId(trackId);\n\n    if (trackId === selected) {\n      dispatch(incrementPointsAction());\n    } else {\n      // Clear points\n    }\n  };\n\n  return (\n    <>\n      <StyledList>\n        {tracks.map(({ id, album, name }) => {\n          const success = isChoosen && id === choosenId && choosenId === selected;\n          const error = isChoosen && id === choosenId && choosenId !== selected;\n          const played = isChoosen && id !== choosenId && id === selected;\n\n          return (\n            <StyledItem key={`track_${id}`}>\n              <StyledOption\n                success={success}\n                error={error}\n                played={played}\n                onClick={() => handleClick(id)}\n                disabled={isChoosen}\n              >\n                <StyledImage src={album.images[1].url} alt=\"\" />\n                <StyledTitle>{name}</StyledTitle>\n              </StyledOption>\n            </StyledItem>\n          );\n        })}\n      </StyledList>\n    </>\n  );\n};\n\nconst StyledList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin: -10px -10px 40px;\n`;\n\nconst StyledItem = styled.li`\n  width: 50%;\n  padding: 10px;\n`;\n\nconst StyledImage = styled.img`\n  width: 100%;\n`;\n\nconst StyledTitle = styled.span`\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst StyledOption = styled.button<{ success?: boolean; error?: boolean; played?: boolean }>`\n  display: block;\n  padding: 0;\n  border: 0;\n  font-family: sans-serif;\n  background: transparent;\n\n  ${props =>\n    props.success &&\n    css`\n      color: #38c172;\n    `}\n  \n  ${props =>\n    props.error &&\n    css`\n      color: red;\n    `}\n\n  ${props =>\n    props.played &&\n    css`\n      color: #38c172;\n    `}\n\n  &:disabled:hover {\n    cursor: not-allowed;\n  }\n`;\n\nexport default TrackSelector;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\ninterface PageTitleProps {\n  right?: string;\n}\n\nconst PageTitle: React.FC<PageTitleProps> = ({ children, right }) => {\n  return (\n    <StyledPageTitle right={right}>\n      {children}\n      {right && right.length && <span>{right}</span>}\n    </StyledPageTitle>\n  );\n};\n\nconst StyledPageTitle = styled.h2<PageTitleProps>`\n  color: #222;\n  margin: 0 0 20px;\n  font-family: Arial, Helvetica, sans-serif;\n\n  ${props =>\n    props.right &&\n    props.right.length &&\n    css`\n      display: flex;\n      justify-content: space-between;\n    `}\n`;\n\nexport default PageTitle;\n","import React from 'react';\n\nconst PlayerAnimation: React.FC = () => {\n  return (\n    <lottie-player\n      src=\"https://assets8.lottiefiles.com/packages/lf20_CyEC2p.json\"\n      background=\"#38c172\"\n      speed=\"1\"\n      style={{ width: '100vw', height: 150, marginLeft: '-30px', marginBottom: 30 }}\n      loop\n      autoplay\n    />\n  );\n};\n\nexport default PlayerAnimation;\n","import { Track, OptionSelector } from './types';\n\nexport function getRandomFloat(min: number, max: number): number {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.random() * (max - min) + min;\n}\n\nexport function getRandomInt(min: number, max: number): number {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function convertTrackIntoOption(response: { tracks: Track[] }): OptionSelector[] {\n  return response.tracks.map(({ id, artists, name }: Track) => ({\n    id: id,\n    title: `${artists[0].name} - ${name}`,\n    selected: false,\n  }));\n}\n","import { useEffect, useState, useCallback } from 'react';\n\nimport { getRandomInt, getRandomFloat } from '../utils';\nimport { SpotifyTrack } from '../types';\n\ninterface Response {\n  tracks: SpotifyTrack[];\n  selected: SpotifyTrack;\n  fetchMoreTracks: () => void;\n}\n\nconst emptyTrack: SpotifyTrack = {\n  id: '',\n  name: '',\n  album: {\n    images: [],\n  },\n  artists: [],\n  preview_url: '',\n};\nconst spotifyUrl = 'https://api.spotify.com/v1/recommendations';\n\nfunction useFetchTracks(token: string | null, genres: string[], limit: number = 4): Response {\n  const [tracks, setTracks] = useState<SpotifyTrack[]>([]);\n  const [selected, setSelected] = useState<SpotifyTrack>(emptyTrack);\n\n  const fetchAndSetTracks = useCallback(async () => {\n    if (!token) return;\n\n    setTracks([]);\n\n    const paramsArr = [\n      ['limit', limit],\n      ['seed_genres', genres.join(',')],\n      ['min_acousticness', getRandomFloat(0.0, 0.5)],\n      ['min_danceability', getRandomFloat(0.0, 0.5)],\n      ['min_energy', getRandomFloat(0.0, 0.5)],\n      ['min_instrumentalness', getRandomFloat(0.0, 0.5)],\n      ['min_valence', getRandomFloat(0.0, 0.5)],\n    ];\n\n    const params = paramsArr.reduce((acc, [key, value]) => {\n      if (!acc) return `${key}=${value}`;\n      return `${acc}&${key}=${value}`;\n    }, '');\n\n    const response = await fetch(`${spotifyUrl}?${params}`, {\n      method: 'GET',\n      headers: new Headers({\n        Authorization: `Bearer ${token || ''}`,\n        'Content-Type': 'application/json',\n      }),\n    });\n    const { tracks } = (await response.json()) as { tracks: SpotifyTrack[] };\n\n    setSelected(tracks[getRandomInt(1, 4)]);\n    setTracks(tracks);\n  }, [genres, limit, token]);\n\n  const fetchMoreTracks = () => {\n    fetchAndSetTracks();\n  };\n\n  useEffect(() => {\n    fetchAndSetTracks();\n  }, [fetchAndSetTracks]);\n\n  return { tracks, selected, fetchMoreTracks };\n}\n\nexport default useFetchTracks;\n","import React, { useContext, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport Button from '../components/Button';\nimport AudioPlayer from '../components/AudioPlayer';\nimport useSpotifyToken from '../custom-hooks/useSpotifyToken';\nimport { StoreContext } from '../store';\nimport TrackSelector from '../components/TrackSelector';\nimport PageTitle from '../components/PageTitle';\nimport PlayerAnimation from '../components/PlayerAnimation';\nimport useFetchTracks from '../custom-hooks/useFetchTracks';\n\nconst GameScreen: React.FC = () => {\n  const { state } = useContext(StoreContext);\n  const { token } = useSpotifyToken();\n  const { tracks, selected, fetchMoreTracks } = useFetchTracks(token, state.genres);\n\n  return (\n    <>\n      <PageTitle right={`Pts: ${state.points}`}>Playing: </PageTitle>\n      {selected.id && (\n        <AudioPlayer src={selected.preview_url} total={parseInt(state.difficulty, 10)} />\n      )}\n      <PlayerAnimation />\n      <TrackSelector tracks={tracks} selected={selected.id} />\n      <StyledBtnGroup>\n        <Button themeStyle=\"secondary\">Reiniciar</Button>\n        <Button onClick={fetchMoreTracks}>Next Track</Button>\n      </StyledBtnGroup>\n    </>\n  );\n};\n\nconst StyledBtnGroup = styled.div`\n  display: flex;\n  margin-left: -10px;\n  margin-right: -10px;\n\n  button {\n    margin-left: 10px;\n    margin-right: 10px;\n    width: 100%;\n  }\n`;\n\nexport default GameScreen;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { OptionSelector } from '../types';\n\ninterface OptionsSelectorItemProps extends OptionSelector {\n  toggleItem: (id: string, multiple?: boolean) => void;\n  multiple?: boolean;\n  fullWidth?: boolean;\n  limit?: number;\n  totalSelected: number;\n}\n\ninterface ItemProps {\n  selected: boolean;\n  fullWidth?: boolean;\n}\n\nconst OptionsSelectorItem: React.FC<OptionsSelectorItemProps> = ({\n  id,\n  title,\n  selected,\n  toggleItem,\n  multiple,\n  fullWidth,\n  limit,\n  totalSelected,\n}) => {\n  const handleClick = () => {\n    if (!selected) {\n      if (!limit) {\n        toggleItem(id, multiple);\n      } else if (limit && totalSelected < limit) {\n        toggleItem(id, multiple);\n      }\n    } else {\n      toggleItem(id, multiple);\n    }\n  };\n\n  return (\n    <Item selected={selected} fullWidth={fullWidth} onClick={handleClick}>\n      {title}\n    </Item>\n  );\n};\n\nconst Item = styled.button<ItemProps>`\n  padding: 10px;\n  margin: 5px;\n  font-size: 20px;\n  border: 0;\n  border-radius: 5px;\n\n  ${props =>\n    props.fullWidth &&\n    css`\n      width: 100%;\n    `}\n\n  ${props =>\n    props.selected &&\n    css`\n      background: #3f96e4;\n      color: #fff;\n      font-weight: bold;\n    `}\n\n  ${props =>\n    !props.selected &&\n    css`\n      border: 1px solid #333;\n      color: #333;\n      background: transparent;\n    `}\n`;\n\nexport default OptionsSelectorItem;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { OptionSelector } from '../types';\nimport OptionsSelectorItem from './OptionsSelectorItem';\nimport PageTitle from './PageTitle';\n\ninterface OptionsSelectorProps {\n  title: string;\n  options: OptionSelector[];\n  multiple?: boolean;\n  fullWidth?: boolean;\n  limit?: number;\n  toggleItem: (id: string, multiple?: boolean) => void;\n}\n\nconst OptionsSelector: React.FC<OptionsSelectorProps> = ({\n  title,\n  options,\n  toggleItem,\n  multiple,\n  fullWidth,\n  limit,\n}) => {\n  const totalSelected = options.filter((item: OptionSelector) => item.selected).length;\n\n  return (\n    <Wrapper>\n      <PageTitle>{title}</PageTitle>\n      <List>\n        {options.map(option => (\n          <OptionsSelectorItem\n            key={option.id}\n            multiple={multiple}\n            toggleItem={toggleItem}\n            fullWidth={fullWidth}\n            limit={limit}\n            totalSelected={totalSelected}\n            {...option}\n          />\n        ))}\n      </List>\n    </Wrapper>\n  );\n};\n\nOptionsSelector.defaultProps = {\n  multiple: false,\n  fullWidth: false,\n};\n\nconst Wrapper = styled.div`\n  margin-bottom: 40px;\n`;\n\nconst List = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: -5px;\n`;\n\nexport default OptionsSelector;\n","import { OptionSelector } from '../../types';\n\nexport const SET_ITEMS = 'options/SET-ITEMS';\nexport const TOGGLE_ITEM = 'options/TOGGLE-ITEM';\n\ninterface State {\n  items: OptionSelector[];\n}\n\ninterface SetItemsAction {\n  type: typeof SET_ITEMS;\n  payload: {\n    items: OptionSelector[];\n  };\n}\n\ninterface ToggleItemAction {\n  type: typeof TOGGLE_ITEM;\n  payload: {\n    id: string;\n    multiple?: boolean;\n  };\n}\n\nexport type Action = SetItemsAction | ToggleItemAction;\n\nfunction isSetItemsAction(action: Action): action is SetItemsAction {\n  return action.type === SET_ITEMS;\n}\n\nfunction isToggleItemAction(action: Action): action is ToggleItemAction {\n  return action.type === TOGGLE_ITEM;\n}\n\nfunction optionsReducer(state: State, action: Action) {\n  if (isSetItemsAction(action)) {\n    return {\n      items: action.payload.items,\n    };\n  }\n\n  if (isToggleItemAction(action)) {\n    if (!action.payload.multiple) {\n      return {\n        items: state.items.map(item => {\n          if (item.id === action.payload.id) {\n            return { ...item, selected: true };\n          }\n          return { ...item, selected: false };\n        }),\n      };\n    }\n\n    return {\n      items: state.items.map(item => {\n        if (item.id === action.payload.id) {\n          return { ...item, selected: !item.selected };\n        }\n        return item;\n      }),\n    };\n  }\n\n  return state;\n}\n\nexport function setItemsAction(items: OptionSelector[]): SetItemsAction {\n  return {\n    type: SET_ITEMS,\n    payload: {\n      items,\n    },\n  };\n}\n\nexport function toggleItemAction(id: string, multiple?: boolean): ToggleItemAction {\n  return {\n    type: TOGGLE_ITEM,\n    payload: {\n      id,\n      multiple,\n    },\n  };\n}\n\nexport default optionsReducer;\n","export const GENRES = [\n  'blues',\n  'country',\n  'dance',\n  'disco',\n  'folk',\n  'forro',\n  'funk',\n  'gospel',\n  'hip-hop',\n  'house',\n  'indie',\n  'jazz',\n  'k-pop',\n  'metal',\n  'mpb',\n  'pagode',\n  'pop',\n  'punk',\n  'reggae',\n  'reggaeton',\n  'rock',\n  'samba',\n  'sertanejo',\n  'ska',\n];\n","import React, { useReducer, useEffect, Dispatch, useContext } from 'react';\n\nimport Button from '../components/Button';\nimport OptionsSelector from '../components/OptionsSelector';\nimport optionsReducer, { Action, setItemsAction, toggleItemAction } from '../store/reducer/options';\nimport useSpotifyToken from '../custom-hooks/useSpotifyToken';\nimport { GENRES } from '../constants';\nimport { setGenresAction, setDifficultyAction, switchGameStateAction } from '../store/global';\nimport { StoreContext } from '../store';\nimport { OptionSelector } from '../types';\n\nconst SetupScreen: React.FC = () => {\n  const { dispatch } = useContext(StoreContext);\n  const [genres, dispatchGenres] = useReducer(optionsReducer, { items: [] });\n  const [difficulties, dispatchDifficulties] = useReducer(optionsReducer, { items: [] });\n  const { token } = useSpotifyToken();\n\n  useEffect(() => {\n    /**\n     * @TODO Allow selecting at max 3 genres\n     */\n    dispatchGenres(\n      setItemsAction(\n        GENRES.map((g: string) => ({\n          id: g,\n          title: g,\n          selected: false,\n        }))\n      )\n    );\n\n    dispatchDifficulties(\n      setItemsAction([\n        { id: '15', title: 'Easy', selected: false },\n        { id: '10', title: 'Medium', selected: true },\n        { id: '5', title: 'Hard', selected: false },\n      ])\n    );\n  }, [token]);\n\n  const handleToggleItem = (dispatch: Dispatch<Action>) => (id: string, multiple?: boolean) => {\n    dispatch(toggleItemAction(id, multiple));\n  };\n\n  const handleStartGame = () => {\n    dispatch(\n      setGenresAction(\n        genres.items.filter((g: OptionSelector) => g.selected).map((g: OptionSelector) => g.id)\n      )\n    );\n    dispatch(\n      setDifficultyAction(difficulties.items.filter((d: OptionSelector) => d.selected)[0].id)\n    );\n\n    dispatch(switchGameStateAction('PLAYING'));\n  };\n\n  return (\n    <>\n      <OptionsSelector\n        title=\"Select the genres you want to guess\"\n        options={genres.items}\n        toggleItem={handleToggleItem(dispatchGenres)}\n        limit={3}\n        multiple\n      />\n      <OptionsSelector\n        title=\"Select the difficulty\"\n        toggleItem={handleToggleItem(dispatchDifficulties)}\n        options={difficulties.items}\n      />\n      <Button onClick={handleStartGame}>Start Game</Button>\n    </>\n  );\n};\n\nexport default SetupScreen;\n","import React, { useEffect, useContext } from 'react';\n\nimport Button from '../components/Button';\nimport useSpotifyToken from '../custom-hooks/useSpotifyToken';\nimport { switchGameStateAction } from '../store/global';\nimport { StoreContext } from '../store';\n\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize';\nconst clientId = 'd9d505e880594b7ca174cf7feeb525ea';\nconst redirectUri =\n  process.env.NODE_ENV === 'production'\n    ? 'https://hermesnetto.github.io/guess-the-song/'\n    : 'http://localhost:4000/';\nconst scopes = ['user-top-read'];\n\nconst HomeScreen: React.FC = () => {\n  const { dispatch } = useContext(StoreContext);\n\n  const {\n    token,\n    actions: { readToken, saveToken },\n  } = useSpotifyToken();\n\n  useEffect(() => {\n    const hash = window.location.hash;\n\n    if (hash) {\n      saveToken(\n        hash\n          .replace('#', '')\n          .split('&')[0]\n          .split('=')[1]\n      );\n\n      dispatch(switchGameStateAction('SETTING_UP'));\n    }\n  }, [dispatch, saveToken]);\n\n  const spotifySignIn = () => {\n    if (!token && !readToken()) {\n      /**\n       * @TODO Validate expired tokens\n       */\n      window.location.href = `${spotifyAuthEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n        '%20'\n      )}&response_type=token&show_dialog=true`;\n    } else {\n      dispatch(switchGameStateAction('SETTING_UP'));\n    }\n  };\n\n  return (\n    <>\n      <Button size=\"lg\" onClick={spotifySignIn} block>\n        Start Game\n      </Button>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useEffect, useContext } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport Brand from './components/Brand';\nimport GameScreen from './screens/Game';\nimport SetupScreen from './screens/Setup';\nimport HomeScreen from './screens/Home';\nimport useSpotifyToken from './custom-hooks/useSpotifyToken';\nimport { switchGameStateAction } from './store/global';\nimport { StoreContext } from './store';\nimport { GameStates } from './store/global';\n\nfunction isSetupPage(gameState: GameStates): boolean {\n  return gameState === 'SETTING_UP';\n}\n\nfunction isGamePage(gameState: GameStates): boolean {\n  return gameState === 'PLAYING';\n}\n\nfunction isHomePage(gameState: GameStates): boolean {\n  return gameState === 'INIT';\n}\n\nconst App: React.FC = ({ children }) => {\n  const { dispatch } = useContext(StoreContext);\n\n  const {\n    actions: { saveToken },\n  } = useSpotifyToken();\n\n  useEffect(() => {\n    const hash = window.location.hash;\n\n    if (hash) {\n      saveToken(\n        hash\n          .replace('#', '')\n          .split('&')[0]\n          .split('=')[1]\n      );\n\n      dispatch(switchGameStateAction('SETTING_UP'));\n      window.history.pushState(\n        '',\n        document.title,\n        window.location.pathname + window.location.search\n      );\n    }\n  }, [dispatch, saveToken]);\n\n  const { state } = useContext(StoreContext);\n\n  function renderBody() {\n    if (isGamePage(state.gameState)) return <GameScreen />;\n    if (isSetupPage(state.gameState)) return <SetupScreen />;\n    return <HomeScreen />;\n  }\n\n  const isHome = isHomePage(state.gameState);\n\n  return (\n    <>\n      <Page>\n        <Container spaceTop={!isHome}>\n          {isHome && <Brand />}\n          {renderBody()}\n        </Container>\n      </Page>\n    </>\n  );\n};\n\nconst Page = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst Container = styled.div<{ spaceTop: boolean }>`\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 0 30px;\n  display: flex;\n  flex-direction: column;\n\n  ${props =>\n    props.spaceTop &&\n    css`\n      margin-top: 20px;\n    `}\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { DefaultTheme } from 'styled-components';\n\nconst variables = {\n  platinum: '#D9E4E5',\n  middleBlue: '#80CED7',\n  mediumAquamarine: '#63C7B2',\n  chineseViolet: '#8E6C88',\n  darkSlateGray: '#394E53',\n  sunny: '#fff07c',\n};\n\nconst theme: DefaultTheme = {\n  colors: {\n    platinum: variables.platinum,\n    middleBlue: variables.middleBlue,\n    mediumAquamarine: variables.mediumAquamarine,\n    chineseViolet: variables.chineseViolet,\n    darkSlateGray: variables.darkSlateGray,\n    sunny: variables.sunny,\n\n    background: variables.darkSlateGray,\n    title: variables.sunny,\n    subtitle: variables.darkSlateGray,\n\n    primaryButtonBg: variables.mediumAquamarine,\n    primaryButtonColor: variables.darkSlateGray,\n    secondaryButtonBg: variables.platinum,\n    secondaryButtonColor: variables.darkSlateGray,\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\nimport { StoreProvider } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <StoreProvider>\n        <App />\n      </StoreProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}