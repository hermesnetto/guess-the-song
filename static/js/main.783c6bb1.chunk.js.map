{"version":3,"sources":["components/Brand.tsx","components/Button.ts","components/AudioPlayer.tsx","custom-hooks/useSpotifyToken.ts","utils.ts","custom-hooks/useSpotifySignIn.ts","store/global.ts","store/index.tsx","components/TrackSelector.tsx","components/PageTitle.tsx","custom-hooks/useFetchTracks.ts","screens/Game.tsx","components/OptionsSelectorItem.tsx","components/OptionsSelector.tsx","store/options.ts","constants.ts","screens/Setup.tsx","screens/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledBrand","styled","h1","props","small","css","Brand","updateSongInterval","Button","button","size","block","ProgressBar","div","ProgressBarLine","AudioPlayer","src","total","useState","played","setPlayed","audioEl","useRef","useEffect","current","pause","clearInterval","setInterval","currentTime","Math","ceil","style","width","ref","autoPlay","useSpotifyToken","token","setToken","key","value","readToken","localStorage","getItem","actions","saveToken","setItem","getRandomFloat","min","max","floor","random","getRandomInt","buildUrlParams","params","reduce","acc","scopes","useSpotifySignIn","paramsArr","join","window","location","href","initialState","genres","difficulty","gameState","points","isSwitchGameState","action","type","isSetGenresAction","isSetDifficultyAction","isIncrementPointsAction","isClearPointsAction","switchGameStateAction","nextState","payload","globalReducer","state","StoreContext","createContext","StoreProvider","children","useReducer","dispatch","Provider","StyledList","ul","StyledItem","li","StyledImage","img","StyledTitle","span","StyledOption","success","error","TrackSelector","tracks","selected","useContext","isChoosen","setIsChoosen","choosenId","setChoosenId","map","id","album","name","onClick","trackId","disabled","images","url","alt","StyledPageTitle","h2","right","length","PageTitle","emptyTrack","artists","preview_url","spotifyUrl","getSelectedTrack","index","calls","limit","useFetchTracks","setState","setTracks","setSelected","fetchAndSetTracks","useCallback","a","fetch","method","headers","Headers","Authorization","response","json","data","fetchMoreTracks","StyledBtnGroup","GameScreen","store","signIn","parseInt","Item","fullWidth","OptionsSelectorItem","title","toggleItem","multiple","totalSelected","OptionsSelector","options","filter","item","Wrapper","List","option","defaultProps","setItemsAction","items","optionsReducer","isSetItemsAction","isToggleItemAction","GENRES","SetupScreen","dispatchGenres","difficulties","dispatchDifficulties","g","handleToggleItem","toggleItemAction","setGenresAction","d","HomeScreen","hash","replace","split","Page","Container","App","history","pushState","document","pathname","search","Game","isSetupPage","Setup","Home","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.783c6bb1.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\n\ninterface BrandProps {\n  small?: boolean;\n}\n\nconst Brand: React.FC<BrandProps> = ({ small }) => {\n  return <StyledBrand small={small}>Guess the Song</StyledBrand>;\n};\n\nconst StyledBrand = styled.h1<BrandProps>`\n  font-family: 'Special Elite', cursive;\n  color: var(--orange-color);\n  font-size: ${props => (props.small ? '26px' : '82px')};\n  font-weight: bold;\n\n  ${props =>\n    !props.small &&\n    css`\n      margin-top: 60px;\n    `};\n\n  ${props =>\n    props.small &&\n    css`\n      margin-bottom: 20px;\n      text-align: center;\n    `}\n`;\n\nexport default Brand;\n","import styled, { css } from 'styled-components';\n\n/**\n * @TODO Check type props not workign\n */\ninterface ButtonProps {\n  size?: 'sm' | 'md' | 'lg';\n  block?: boolean;\n}\n\nconst Button = styled.button<ButtonProps>`\n  border-style: solid;\n  border-width: 1px;\n  text-decoration: none;\n  text-align: center;\n  border-radius: 5px;\n  background: var(--green-color);\n  border-color: var(--green-dark-color);\n  color: #fff;\n\n  ${props => {\n    switch (props.size) {\n      case 'sm':\n        return css`\n          font-size: 12px;\n          padding: 10px;\n        `;\n      case 'lg':\n        return css`\n          font-size: 30px;\n          padding: 20px;\n        `;\n      default:\n        return css`\n          font-size: 20px;\n          padding: 12px 20px;\n        `;\n    }\n  }}\n\n  ${props =>\n    props.block &&\n    css`\n      display: block;\n      width: 100%;\n    `}\n`;\n\nexport default Button;\n","import React, { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\n\ninterface AudioPlayerProps {\n  src: string;\n  total: number;\n}\n\nlet updateSongInterval: number;\n\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({ src, total }) => {\n  const [played, setPlayed] = useState<number>(0);\n  const audioEl = useRef<HTMLAudioElement>(null);\n\n  useEffect(() => {\n    setPlayed(0);\n  }, [src]);\n\n  useEffect(() => {\n    if (played === total) {\n      if (audioEl.current) {\n        audioEl.current.pause();\n      }\n\n      if (updateSongInterval) {\n        clearInterval(updateSongInterval);\n      }\n    }\n  }, [played, total]);\n\n  useEffect(() => {\n    updateSongInterval = setInterval(() => {\n      if (audioEl.current?.currentTime) {\n        setPlayed(Math.ceil(audioEl.current.currentTime));\n      }\n    }, 10);\n  }, [src]);\n\n  return (\n    <>\n      <ProgressBar>\n        <ProgressBarLine style={{ width: `${(played / total) * 100}%` }} />\n      </ProgressBar>\n      <audio ref={audioEl} src={src} autoPlay />\n    </>\n  );\n};\n\nconst ProgressBar = styled.div`\n  height: 15px;\n  background: #ccc;\n  border: 1px solid #444;\n  border-radius: 10px;\n  overflow: hidden;\n  margin-bottom: 40px;\n`;\n\nconst ProgressBarLine = styled.div`\n  background: var(--yellow-color);\n  height: 100%;\n`;\n\nexport default AudioPlayer;\n","import { useState, useEffect } from 'react';\n\ninterface UseSpotifyTokenActions {\n  readToken: () => string | null;\n  saveToken: (token: string) => void;\n}\n\nconst useSpotifyToken = (): { token: string | null; actions: UseSpotifyTokenActions } => {\n  const [token, setToken] = useState<string>('');\n  const key = 'gts-spotify-token';\n\n  useEffect(() => {\n    const value = readToken();\n    if (value) {\n      setToken(value);\n    }\n  }, []);\n\n  const readToken = (): string | null => {\n    return localStorage.getItem(key);\n  };\n\n  const saveToken = (token: string): void => {\n    localStorage.setItem(key, token);\n    setToken(token);\n  };\n\n  return { token, actions: { readToken, saveToken } };\n};\n\nexport default useSpotifyToken;\n","import { Track, OptionSelector } from './types';\n\nexport const getRandomFloat = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.random() * (max - min) + min;\n};\n\nexport const getRandomInt = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport const convertTrackIntoOption = (response: { tracks: Track[] }): OptionSelector[] => {\n  return response.tracks.map(({ id, artists, name }: Track) => ({\n    id: id,\n    title: `${artists[0].name} - ${name}`,\n    selected: false,\n  }));\n};\n\nexport const buildUrlParams = (params: any[][]): string => {\n  return params.reduce((acc, [key, value]) => {\n    if (!acc) return `${key}=${value}`;\n    return `${acc}&${key}=${value}`;\n  }, '');\n};\n","import { buildUrlParams } from '../utils';\n\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize';\nconst clientId = 'd9d505e880594b7ca174cf7feeb525ea';\nconst scopes = ['user-top-read'];\nconst redirectUri =\n  process.env.NODE_ENV === 'production'\n    ? 'https://hermesnetto.github.io/guess-the-song/'\n    : 'http://localhost:4000/';\n\ntype UseSpotifySignInResponse = () => void;\n\nconst useSpotifySignIn = (): UseSpotifySignInResponse => {\n  const signIn = () => {\n    const paramsArr = [\n      ['client_id', clientId],\n      ['redirect_uri', redirectUri],\n      ['scope', scopes.join('%20')],\n      ['response_type', 'token'],\n      ['show_dialog', 'true'],\n    ];\n    const params = buildUrlParams(paramsArr);\n\n    window.location.href = `${spotifyAuthEndpoint}?${params}`;\n  };\n\n  return signIn;\n};\n\nexport default useSpotifySignIn;\n","export type GameStates = 'INIT' | 'SETTING_UP' | 'PLAYING';\n\nexport interface State {\n  genres: string[];\n  difficulty: string;\n  gameState: GameStates;\n  points: number;\n}\n\nexport const initialState: State = {\n  genres: [],\n  difficulty: '15',\n  gameState: 'INIT',\n  points: 0,\n};\n\ninterface SwitchGameStateAction {\n  type: 'SWITCH_GAME_STATE';\n  payload: {\n    nextState: GameStates;\n  };\n}\n\ninterface SetGenresAction {\n  type: 'SET_GENRES';\n  payload: {\n    genres: string[];\n  };\n}\n\ninterface SetDifficultyAction {\n  type: 'SET_DIFFICULTY';\n  payload: {\n    difficulty: string;\n  };\n}\n\ninterface IncrementPointsAction {\n  type: 'INCREMENT_POINTS';\n}\n\ninterface ClearPointsAction {\n  type: 'CLEAR_POINTS';\n}\n\nexport type Action =\n  | SetGenresAction\n  | SetDifficultyAction\n  | SwitchGameStateAction\n  | IncrementPointsAction\n  | ClearPointsAction;\n\nconst isSwitchGameState = (action: Action): action is SwitchGameStateAction => {\n  return action.type === 'SWITCH_GAME_STATE';\n};\n\nconst isSetGenresAction = (action: Action): action is SetGenresAction => {\n  return action.type === 'SET_GENRES';\n};\n\nconst isSetDifficultyAction = (action: Action): action is SetDifficultyAction => {\n  return action.type === 'SET_DIFFICULTY';\n};\n\nconst isIncrementPointsAction = (action: Action): action is IncrementPointsAction => {\n  return action.type === 'INCREMENT_POINTS';\n};\n\nconst isClearPointsAction = (action: Action): action is ClearPointsAction => {\n  return action.type === 'CLEAR_POINTS';\n};\n\nconst globalReducer = (state: State = initialState, action: Action) => {\n  if (isSwitchGameState(action)) {\n    return { ...state, gameState: action.payload.nextState };\n  }\n\n  if (isSetGenresAction(action)) {\n    return { ...state, genres: action.payload.genres };\n  }\n\n  if (isSetDifficultyAction(action)) {\n    return { ...state, difficulty: action.payload.difficulty };\n  }\n\n  if (isIncrementPointsAction(action)) {\n    return { ...state, points: state.points + 1 };\n  }\n\n  if (isClearPointsAction(action)) {\n    return { ...state, points: 0 };\n  }\n\n  return state;\n};\n\nexport const switchGameStateAction = (nextState: GameStates): SwitchGameStateAction => ({\n  type: 'SWITCH_GAME_STATE',\n  payload: { nextState },\n});\n\nexport const setGenresAction = (genres: string[]): SetGenresAction => ({\n  type: 'SET_GENRES',\n  payload: { genres },\n});\n\nexport const setDifficultyAction = (difficulty: string): SetDifficultyAction => ({\n  type: 'SET_DIFFICULTY',\n  payload: { difficulty },\n});\n\nexport const incrementPointsAction = (): IncrementPointsAction => ({\n  type: 'INCREMENT_POINTS',\n});\n\nexport const clearPointsAction = (): ClearPointsAction => ({\n  type: 'CLEAR_POINTS',\n});\n\nexport default globalReducer;\n","import React, { createContext, Dispatch, useReducer } from 'react';\n\nimport globalReducer, { State, Action, initialState } from './global';\n\nconst StoreContext = createContext({} as { state: State; dispatch: Dispatch<Action> });\n\nconst StoreProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(globalReducer, initialState);\n\n  return <StoreContext.Provider value={{ state, dispatch }}>{children}</StoreContext.Provider>;\n};\n\nexport { StoreContext, StoreProvider };\n","import React, { useState, useContext, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { SpotifyTrack } from '../types';\n\nimport { StoreContext } from '../store';\nimport { incrementPointsAction, clearPointsAction } from '../store/global';\n\ninterface TrackSelectorProps {\n  tracks: SpotifyTrack[];\n  selected: string;\n}\n\nconst TrackSelector: React.FC<TrackSelectorProps> = ({ tracks, selected }) => {\n  const { dispatch } = useContext(StoreContext);\n  const [isChoosen, setIsChoosen] = useState<boolean>(false);\n  const [choosenId, setChoosenId] = useState<string>('');\n\n  useEffect(() => {\n    setIsChoosen(false);\n    setChoosenId('');\n  }, [selected]);\n\n  const handleClick = (trackId: string) => {\n    setIsChoosen(true);\n    setChoosenId(trackId);\n\n    if (trackId === selected) {\n      dispatch(incrementPointsAction());\n    } else {\n      dispatch(clearPointsAction());\n    }\n  };\n\n  return (\n    <>\n      <StyledList>\n        {tracks.map(({ id, album, name }) => {\n          const success = isChoosen && id === choosenId && choosenId === selected;\n          const error = isChoosen && id === choosenId && choosenId !== selected;\n          const played = isChoosen && id !== choosenId && id === selected;\n\n          return (\n            <StyledItem key={`track_${id}`}>\n              <StyledOption\n                success={success}\n                error={error}\n                played={played}\n                onClick={() => handleClick(id)}\n                disabled={isChoosen}\n              >\n                <StyledImage src={album.images[1].url} alt=\"\" />\n                <StyledTitle>{name}</StyledTitle>\n              </StyledOption>\n            </StyledItem>\n          );\n        })}\n      </StyledList>\n    </>\n  );\n};\n\nconst StyledList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin: -10px -10px 40px;\n`;\n\nconst StyledItem = styled.li`\n  width: 50%;\n  padding: 10px;\n`;\n\nconst StyledImage = styled.img`\n  width: 100%;\n`;\n\nconst StyledTitle = styled.span`\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst StyledOption = styled.button<{ success?: boolean; error?: boolean; played?: boolean }>`\n  display: block;\n  padding: 0;\n  border: 0;\n  font-family: sans-serif;\n  background: transparent;\n\n  ${props =>\n    props.success &&\n    css`\n      color: var(--green-color);\n    `}\n  \n  ${props =>\n    props.error &&\n    css`\n      color: var(--red-color);\n    `}\n\n  ${props =>\n    props.played &&\n    css`\n      color: var(--green-color);\n    `}\n\n  &:disabled:hover {\n    cursor: not-allowed;\n  }\n`;\n\nexport default TrackSelector;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\ninterface PageTitleProps {\n  right?: string;\n}\n\nconst PageTitle: React.FC<PageTitleProps> = ({ children, right }) => {\n  return (\n    <StyledPageTitle right={right}>\n      {children}\n      {right && right.length && <span>{right}</span>}\n    </StyledPageTitle>\n  );\n};\n\nconst StyledPageTitle = styled.h2<PageTitleProps>`\n  color: #222;\n  margin: 0 0 20px;\n  font-family: Arial, Helvetica, sans-serif;\n\n  ${props =>\n    props.right &&\n    props.right.length &&\n    css`\n      display: flex;\n      justify-content: space-between;\n    `}\n`;\n\nexport default PageTitle;\n","import { useEffect, useState, useCallback } from 'react';\n\nimport { getRandomInt, getRandomFloat, buildUrlParams } from '../utils';\nimport { SpotifyTrack } from '../types';\n\ntype State = 'iddle' | 'started' | 'success' | 'error';\n\ninterface Response {\n  state: State;\n  tracks: SpotifyTrack[];\n  selected: SpotifyTrack;\n  fetchMoreTracks: () => void;\n}\n\ninterface HttpResponse {\n  tracks: SpotifyTrack[];\n  error?: {\n    status: number;\n    messaged: string;\n  };\n}\n\nconst emptyTrack: SpotifyTrack = {\n  id: '',\n  name: '',\n  album: {\n    images: [],\n  },\n  artists: [],\n  preview_url: '',\n};\n\nconst spotifyUrl = 'https://api.spotify.com/v1/recommendations';\n\nconst getSelectedTrack = (\n  tracks: SpotifyTrack[],\n  index: number,\n  calls: number,\n  limit: number\n): SpotifyTrack => {\n  if (calls === limit) {\n    return tracks[0];\n  }\n\n  if (tracks[index].preview_url) {\n    return tracks[index];\n  }\n\n  return getSelectedTrack(tracks, getRandomInt(0, 4), calls + 1, limit);\n};\n\nconst useFetchTracks = (token: string | null, genres: string[], limit: number = 4): Response => {\n  const [state, setState] = useState<State>('iddle');\n  const [tracks, setTracks] = useState<SpotifyTrack[]>([]);\n  const [selected, setSelected] = useState<SpotifyTrack>(emptyTrack);\n\n  const fetchAndSetTracks = useCallback(async () => {\n    if (!token) return;\n\n    setState('started');\n    setTracks([]);\n\n    const paramsArr = [\n      ['limit', limit],\n      ['seed_genres', genres.join(',')],\n      ['min_acousticness', getRandomFloat(0.0, 0.5)],\n      ['min_danceability', getRandomFloat(0.0, 0.5)],\n      ['min_energy', getRandomFloat(0.0, 0.5)],\n      ['min_instrumentalness', getRandomFloat(0.0, 0.5)],\n      ['min_valence', getRandomFloat(0.0, 0.5)],\n    ];\n    const params = buildUrlParams(paramsArr);\n    const response = await fetch(`${spotifyUrl}?${params}`, {\n      method: 'GET',\n      headers: new Headers({\n        Authorization: `Bearer ${token || ''}`,\n        'Content-Type': 'application/json',\n      }),\n    });\n    const data = (await response.json()) as HttpResponse;\n\n    if (!data.error) {\n      setState('success');\n      setTracks(data.tracks);\n      setSelected(getSelectedTrack(data.tracks, getRandomInt(0, 4), 1, limit));\n    } else {\n      setState('error');\n    }\n  }, [genres, limit, token]);\n\n  const fetchMoreTracks = () => {\n    fetchAndSetTracks();\n  };\n\n  useEffect(() => {\n    fetchAndSetTracks();\n  }, [fetchAndSetTracks]);\n\n  return { state, tracks, selected, fetchMoreTracks };\n};\n\nexport default useFetchTracks;\n","import React, { useContext, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport Button from '../components/Button';\nimport AudioPlayer from '../components/AudioPlayer';\nimport useSpotifyToken from '../custom-hooks/useSpotifyToken';\nimport useSpotifySignIn from '../custom-hooks/useSpotifySignIn';\nimport { StoreContext } from '../store';\nimport TrackSelector from '../components/TrackSelector';\nimport PageTitle from '../components/PageTitle';\nimport useFetchTracks from '../custom-hooks/useFetchTracks';\n\nconst GameScreen: React.FC = () => {\n  const { state: store } = useContext(StoreContext);\n  const { token, actions } = useSpotifyToken();\n  const signIn = useSpotifySignIn();\n  const { state, tracks, selected, fetchMoreTracks } = useFetchTracks(token, store.genres);\n\n  useEffect(() => {\n    if (state === 'error') {\n      actions.saveToken('');\n      signIn();\n    }\n  }, [state, actions, signIn]);\n\n  return (\n    <>\n      <PageTitle right={`Pts: ${store.points}`}>Playing: </PageTitle>\n      {selected.id && (\n        <AudioPlayer src={selected.preview_url} total={parseInt(store.difficulty, 10)} />\n      )}\n      <TrackSelector tracks={tracks} selected={selected.id} />\n      <StyledBtnGroup>\n        <Button onClick={fetchMoreTracks}>Next Track</Button>\n      </StyledBtnGroup>\n    </>\n  );\n};\n\nconst StyledBtnGroup = styled.div`\n  display: flex;\n  margin-left: -10px;\n  margin-right: -10px;\n\n  button {\n    margin-left: 10px;\n    margin-right: 10px;\n    width: 100%;\n  }\n`;\n\nexport default GameScreen;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { OptionSelector } from '../types';\n\ninterface OptionsSelectorItemProps extends OptionSelector {\n  toggleItem: (id: string, multiple?: boolean) => void;\n  multiple?: boolean;\n  fullWidth?: boolean;\n  limit?: number;\n  totalSelected: number;\n}\n\ninterface ItemProps {\n  selected: boolean;\n  fullWidth?: boolean;\n}\n\nconst OptionsSelectorItem: React.FC<OptionsSelectorItemProps> = ({\n  id,\n  title,\n  selected,\n  toggleItem,\n  multiple,\n  fullWidth,\n  limit,\n  totalSelected,\n}) => {\n  const handleClick = () => {\n    if (!selected) {\n      if (!limit) {\n        toggleItem(id, multiple);\n      } else if (limit && totalSelected < limit) {\n        toggleItem(id, multiple);\n      }\n    } else {\n      toggleItem(id, multiple);\n    }\n  };\n\n  return (\n    <Item selected={selected} fullWidth={fullWidth} onClick={handleClick}>\n      {title}\n    </Item>\n  );\n};\n\nconst Item = styled.button<ItemProps>`\n  padding: 10px;\n  margin: 5px;\n  font-size: 20px;\n  border: 0;\n  border-radius: 5px;\n\n  ${props =>\n    props.fullWidth &&\n    css`\n      width: 100%;\n    `}\n\n  ${props =>\n    props.selected &&\n    css`\n      background: var(--blue-color);\n      color: #fff;\n      font-weight: bold;\n    `}\n\n  ${props =>\n    !props.selected &&\n    css`\n      border: 1px solid var(--grey-color);\n      color: var(--grey-color);\n      background: transparent;\n    `}\n`;\n\nexport default OptionsSelectorItem;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { OptionSelector } from '../types';\nimport OptionsSelectorItem from './OptionsSelectorItem';\nimport PageTitle from './PageTitle';\n\ninterface OptionsSelectorProps {\n  title: string;\n  options: OptionSelector[];\n  multiple?: boolean;\n  fullWidth?: boolean;\n  limit?: number;\n  toggleItem: (id: string, multiple?: boolean) => void;\n}\n\nconst OptionsSelector: React.FC<OptionsSelectorProps> = ({\n  title,\n  options,\n  toggleItem,\n  multiple,\n  fullWidth,\n  limit,\n}) => {\n  const totalSelected = options.filter((item: OptionSelector) => item.selected).length;\n\n  return (\n    <Wrapper>\n      <PageTitle>{title}</PageTitle>\n      <List>\n        {options.map(option => (\n          <OptionsSelectorItem\n            key={option.id}\n            multiple={multiple}\n            toggleItem={toggleItem}\n            fullWidth={fullWidth}\n            limit={limit}\n            totalSelected={totalSelected}\n            {...option}\n          />\n        ))}\n      </List>\n    </Wrapper>\n  );\n};\n\nOptionsSelector.defaultProps = {\n  multiple: false,\n  fullWidth: false,\n};\n\nconst Wrapper = styled.div`\n  margin-bottom: 40px;\n`;\n\nconst List = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: -5px;\n`;\n\nexport default OptionsSelector;\n","import { OptionSelector } from '../types';\n\nexport const SET_ITEMS = 'options/SET-ITEMS';\nexport const TOGGLE_ITEM = 'options/TOGGLE-ITEM';\n\ninterface State {\n  items: OptionSelector[];\n}\n\ninterface SetItemsAction {\n  type: typeof SET_ITEMS;\n  payload: {\n    items: OptionSelector[];\n  };\n}\n\ninterface ToggleItemAction {\n  type: typeof TOGGLE_ITEM;\n  payload: {\n    id: string;\n    multiple?: boolean;\n  };\n}\n\nexport type Action = SetItemsAction | ToggleItemAction;\n\nconst isSetItemsAction = (action: Action): action is SetItemsAction => {\n  return action.type === SET_ITEMS;\n};\n\nconst isToggleItemAction = (action: Action): action is ToggleItemAction => {\n  return action.type === TOGGLE_ITEM;\n};\n\nconst optionsReducer = (state: State, action: Action): State => {\n  if (isSetItemsAction(action)) {\n    return {\n      items: action.payload.items,\n    };\n  }\n\n  if (isToggleItemAction(action)) {\n    if (!action.payload.multiple) {\n      return {\n        items: state.items.map(item => {\n          if (item.id === action.payload.id) {\n            return { ...item, selected: true };\n          }\n          return { ...item, selected: false };\n        }),\n      };\n    }\n\n    return {\n      items: state.items.map(item => {\n        if (item.id === action.payload.id) {\n          return { ...item, selected: !item.selected };\n        }\n        return item;\n      }),\n    };\n  }\n\n  return state;\n};\n\nexport const setItemsAction = (items: OptionSelector[]): SetItemsAction => ({\n  type: SET_ITEMS,\n  payload: {\n    items,\n  },\n});\n\nexport const toggleItemAction = (id: string, multiple?: boolean): ToggleItemAction => ({\n  type: TOGGLE_ITEM,\n  payload: {\n    id,\n    multiple,\n  },\n});\n\nexport default optionsReducer;\n","export const GENRES = [\n  'blues',\n  'country',\n  'dance',\n  'disco',\n  'folk',\n  'forro',\n  'funk',\n  'gospel',\n  'hip-hop',\n  'house',\n  'indie',\n  'jazz',\n  'k-pop',\n  'metal',\n  'mpb',\n  'pagode',\n  'pop',\n  'punk',\n  'reggae',\n  'reggaeton',\n  'rock',\n  'samba',\n  'sertanejo',\n  'ska',\n];\n","import React, { useReducer, useEffect, Dispatch, useContext } from 'react';\n\nimport Button from '../components/Button';\nimport OptionsSelector from '../components/OptionsSelector';\nimport optionsReducer, { Action, setItemsAction, toggleItemAction } from '../store/options';\nimport useSpotifyToken from '../custom-hooks/useSpotifyToken';\nimport { GENRES } from '../constants';\nimport { setGenresAction, setDifficultyAction, switchGameStateAction } from '../store/global';\nimport { StoreContext } from '../store';\nimport { OptionSelector } from '../types';\n\nconst SetupScreen: React.FC = () => {\n  const { dispatch } = useContext(StoreContext);\n  const [genres, dispatchGenres] = useReducer(optionsReducer, { items: [] });\n  const [difficulties, dispatchDifficulties] = useReducer(optionsReducer, { items: [] });\n  const { token } = useSpotifyToken();\n\n  useEffect(() => {\n    /**\n     * @TODO Allow selecting at max 3 genres\n     */\n    dispatchGenres(\n      setItemsAction(\n        GENRES.map((g: string) => ({\n          id: g,\n          title: g,\n          selected: false,\n        }))\n      )\n    );\n\n    dispatchDifficulties(\n      setItemsAction([\n        { id: '15', title: 'Easy', selected: false },\n        { id: '10', title: 'Medium', selected: true },\n        { id: '5', title: 'Hard', selected: false },\n      ])\n    );\n  }, [token]);\n\n  const handleToggleItem = (dispatch: Dispatch<Action>) => (id: string, multiple?: boolean) => {\n    dispatch(toggleItemAction(id, multiple));\n  };\n\n  const handleStartGame = () => {\n    dispatch(\n      setGenresAction(\n        genres.items.filter((g: OptionSelector) => g.selected).map((g: OptionSelector) => g.id)\n      )\n    );\n    dispatch(\n      setDifficultyAction(difficulties.items.filter((d: OptionSelector) => d.selected)[0].id)\n    );\n\n    dispatch(switchGameStateAction('PLAYING'));\n  };\n\n  return (\n    <>\n      <OptionsSelector\n        title=\"Select the genres you want to guess\"\n        options={genres.items}\n        toggleItem={handleToggleItem(dispatchGenres)}\n        limit={3}\n        multiple\n      />\n      <OptionsSelector\n        title=\"Select the difficulty\"\n        toggleItem={handleToggleItem(dispatchDifficulties)}\n        options={difficulties.items}\n      />\n      <Button onClick={handleStartGame}>Start Game</Button>\n    </>\n  );\n};\n\nexport default SetupScreen;\n","import React, { useEffect, useContext } from 'react';\n\nimport Button from '../components/Button';\nimport useSpotifyToken from '../custom-hooks/useSpotifyToken';\nimport useSpotifySignIn from '../custom-hooks/useSpotifySignIn';\nimport { switchGameStateAction } from '../store/global';\nimport { StoreContext } from '../store';\n\nconst HomeScreen: React.FC = () => {\n  const signIn = useSpotifySignIn();\n  const { dispatch } = useContext(StoreContext);\n\n  const {\n    token,\n    actions: { readToken, saveToken },\n  } = useSpotifyToken();\n\n  useEffect(() => {\n    const hash = window.location.hash;\n\n    if (hash) {\n      saveToken(\n        hash\n          .replace('#', '')\n          .split('&')[0]\n          .split('=')[1]\n      );\n\n      dispatch(switchGameStateAction('SETTING_UP'));\n    }\n  }, [dispatch, saveToken]);\n\n  const spotifySignIn = () => {\n    if (!token && !readToken()) {\n      signIn();\n    } else {\n      dispatch(switchGameStateAction('SETTING_UP'));\n    }\n  };\n\n  return (\n    <>\n      <Button size=\"lg\" onClick={spotifySignIn} block>\n        Start Game\n      </Button>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useEffect, useContext } from 'react';\nimport styled from 'styled-components';\n\nimport Brand from './components/Brand';\nimport GameScreen from './screens/Game';\nimport SetupScreen from './screens/Setup';\nimport HomeScreen from './screens/Home';\nimport useSpotifyToken from './custom-hooks/useSpotifyToken';\nimport { switchGameStateAction } from './store/global';\nimport { StoreContext } from './store';\nimport { GameStates } from './store/global';\n\nconst isSetupPage = (gameState: GameStates): boolean => gameState === 'SETTING_UP';\nconst isGamePage = (gameState: GameStates): boolean => gameState === 'PLAYING';\nconst isHomePage = (gameState: GameStates): boolean => gameState === 'INIT';\n\nconst App: React.FC = () => {\n  const { dispatch } = useContext(StoreContext);\n\n  const {\n    actions: { saveToken },\n  } = useSpotifyToken();\n\n  useEffect(() => {\n    const hash = window.location.hash;\n\n    if (hash) {\n      saveToken(\n        hash\n          .replace('#', '')\n          .split('&')[0]\n          .split('=')[1]\n      );\n\n      dispatch(switchGameStateAction('SETTING_UP'));\n      window.history.pushState(\n        '',\n        document.title,\n        window.location.pathname + window.location.search\n      );\n    }\n  }, [dispatch, saveToken]);\n\n  const { state } = useContext(StoreContext);\n\n  const renderBody = () => {\n    if (isGamePage(state.gameState)) return <GameScreen />;\n    if (isSetupPage(state.gameState)) return <SetupScreen />;\n    return <HomeScreen />;\n  };\n\n  return (\n    <>\n      <Page>\n        <Container>\n          {isHomePage(state.gameState) && <Brand />}\n          {renderBody()}\n        </Container>\n      </Page>\n    </>\n  );\n};\n\nconst Page = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 30px 30px 40px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreProvider } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}